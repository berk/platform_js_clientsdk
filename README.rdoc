= Platform JavaScript SDK

The Platform Javascript SDK is a full featured javascript library allowing developers to build dynamic web applications in the browser with Platform's data. 
It enables full access to all of Platform's API methods on the client-side and provides robust functionality for working with Oauth 2.0 authentication. 

== Getting Started

To get started, you'll need to add the library to your page, and initialize your app by calling <strong>Platform.init()</strong>, passing in your application key. 
The best place to put this is at the bottom of your page, before the closing <strong>&lt;/body&gt;</strong> tag to prohibit blocking parallel downloads as described in 
<a href="http://developer.yahoo.com/performance/rules.html#js_bottom">Yahoo's best practices</a>.

	<script src="https://raw.github.com/berk/platform_js_clientsdk/master/jsdk.js">&lt;/script>
	<script>
    	Platform.init({
        	app_id: 'YOUR_APP_KEY'
    	});
	</script>

In addition to app_id, <strong>Platform.init()</strong> has a few optional parameters.

	<script src="http://geni.com/jsdk.js">&lt;/script>
	<script>
    Platform.init({
        app_id: 'YOUR_APP_KEY',
        host: 'http://localhost:3000',    	// change host to your platform application server
        cookie: true,                       // enables saving the access token to a cookie on the users machine
        logging:true                        // enable log messages to help in debugging
    });
  </script>


== Authentication

Once your app has been initialized you can authenticate the user. 
Platform uses Oauth 2.0 for authentication, which entails getting an access token for a user via a redirect to the Platform.com website. 
Once a user approves your application you can then use the access token to make authorized requests to Platform's API on behalf of that user.


=== Platform.getStatus

To authenticate a user via the Javascript SDK you'll need to figure out whether the user is logged in and whether that user has already authorized your application. To do this we can use <strong>Platform.getStatus()</strong>.


  Platform.getStatus(function(response) {
        if(response.status == 'authorized') {
            // User is logged in and has authorized your application.
            // You can now make authorized calls to the API.
        } else {
            // User is either logged out, has not authorized the app or both.
        }
  });


The Platform.getStatus() method will make a request to Platform to obtain the current status of the user. The request will respond with one of three status types:
  
* "authorized" - the user is logged in to Platform and has authorized your application</li>
* "unauthorized" - the user is logged in to Platform but has not authorized your application</li>
* "unknown" - the user is logged out of Platform</li>


=== Platform.connect

If the status is 'authorized', an access token will be returned which can then be used to start making API calls. If the status is either 'unauthorized' or 'unknown', your application will need to prompt the user to login and/or authorize by calling Platform.connect().


  Platform.connect(function(response) {
      if(response.status == 'authorized')) {
          // User is logged in and has authorized your application.
        // You can now make authorized calls to the API.
      }  else {
        // User canceled the popup
      }
  });

Platform.connect() will open a small popup window to the Platform.com site, prompting the user to login and authorize your application. The popup will close immediately after authorization is either allowed or disallowed.

Just like the Platform.getStatus() method, Platform.connect() returns user status and an access token if the user authorizes the application. Note: Because calling this method opens a popup window to the Platform.com site, it should only be called on a user action like a click on a button or link, as most browsers will block the popup unless they are the result of a user initiated event.

=== Platform.logout

At some point you may wish to offer your users a way to logout of Platform. To do this the Javascript SDK offers the logout() method.

  Platform.logout(function() {
      // The user is now logged out of Platform
      // Your application will no longer be able to make api calls on the users behalf until they log back in 
  });


=== Status Change Events

The Javascript SDK also provides an 'auth:statusChange' event that can be subscribed to. The event fires when the user's status changes as the result of calling one of these methods.

  Platform.Event.bind('auth:statusChange',function(status) {
      // status will be either 'authorized', 'unauthorized' or 'unknown'
  });

Similar to jQuery, you can subscribe/unsubscribe from events using bind (Platform.Event.bind) and unbind (Platform.Event.unbind).


=== Making API Calls

Once you have an authenticated user, you are free to make calls to the Platform API. With the Javascript SDK, developers get full access to the API directly through the user's browser via the Platform.api() method.

The first argument is the path to the API method and it is the only required argument. IDs are embedded before the action so the urls read more like a sentence. For instance, to get all profile 101’s tree matches you would request:

  Platform.api('/profile-101/tree_matches', function(response) {
      // returns a list of tree matches for profile with id 101
  });


Omitting the ids in urls implies the action should be applied to the current user’s data. 

  Platform.api('/profile', function(response) {
      // returns current user's profile data
      // alert(response.name)
  });

Specific parameters can optionally be passed in as the second argument.

  Platform.api('/profile', { fields : 'first_name'}, function(data) 
      // only returns first name of profile current users profile
      alert("Welcome + " " + response.first_name);
  });


For post requests, you'll need to pass a 'method' parameter in the second argument.

  Platform.api('/profile', {
          method:'post',
          first_name: 'John'
      }, 
      function(response) {
          // the current users first name is now set to 'John'
      }
  );

